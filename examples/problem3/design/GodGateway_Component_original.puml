@startuml God Information Gateway API - Gateway Service Components
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Component diagram for Gateway Service in God Information Gateway API

' External Actors
Person(apiConsumer, "API Consumer", "Makes requests to the gateway")

' Other Containers
Container(gatewayApi, "Gateway REST API", "Spring Boot", "REST endpoint layer")
System_Ext(externalMythologyApis, "External Mythology APIs", "External god data services")

' Gateway Service Container Boundary
Container_Boundary(gatewayService, "Gateway Service") {
    Component(godController, "God Controller", "Spring MVC @RestController", "Handles HTTP requests for /api/v1/gods/{mythology} endpoint")
    Component(mythologyService, "Mythology Service", "Spring @Service", "Core business logic for mythology data aggregation")
    Component(mythologyValidator, "Mythology Validator", "Spring Component", "Validates mythology type parameters (GREEK, ROMAN, etc.)")
    Component(responseAggregator, "Response Aggregator", "Spring Component", "Aggregates and formats responses with metadata")
    
    Component(greekApiClient, "Greek API Client", "Spring RestClient", "HTTP client for Greek gods API")
    Component(romanApiClient, "Roman API Client", "Spring RestClient", "HTTP client for Roman gods API")
    Component(nordicApiClient, "Nordic API Client", "Spring RestClient", "HTTP client for Nordic gods API")
    Component(indianApiClient, "Indian API Client", "Spring RestClient", "HTTP client for Indian gods API")
    Component(celtibrianApiClient, "Celtiberian API Client", "Spring RestClient", "HTTP client for Celtiberian gods API")
    
    Component(timeoutConfiguration, "Timeout Configuration", "Spring Configuration", "Configures 10-second timeout for all external API calls")
    Component(errorHandler, "Error Handler", "Spring @ControllerAdvice", "Handles exceptions and converts to appropriate HTTP responses")
}

' Relationships
Rel(apiConsumer, gatewayApi, "Makes HTTP requests", "HTTPS/REST")
Rel(gatewayApi, godController, "Routes requests", "HTTP")

Rel(godController, mythologyValidator, "Validates mythology type", "validateMythology()")
Rel(godController, mythologyService, "Requests god data", "getGodsByMythology()")
Rel(godController, errorHandler, "Handles exceptions", "Exception handling")

Rel(mythologyService, responseAggregator, "Formats response", "aggregateResponse()")
Rel(mythologyService, greekApiClient, "Fetches Greek gods", "getGreekGods()")
Rel(mythologyService, romanApiClient, "Fetches Roman gods", "getRomanGods()")
Rel(mythologyService, nordicApiClient, "Fetches Nordic gods", "getNordicGods()")
Rel(mythologyService, indianApiClient, "Fetches Indian gods", "getIndianGods()")
Rel(mythologyService, celtibrianApiClient, "Fetches Celtiberian gods", "getCeltibrianGods()")

Rel(greekApiClient, externalMythologyApis, "GET /greek", "HTTPS/JSON")
Rel(romanApiClient, externalMythologyApis, "GET /roman", "HTTPS/JSON")
Rel(nordicApiClient, externalMythologyApis, "GET /nordic", "HTTPS/JSON")
Rel(indianApiClient, externalMythologyApis, "GET /indian", "HTTPS/JSON")
Rel(celtibrianApiClient, externalMythologyApis, "GET /celtiberian", "HTTPS/JSON")

Rel(timeoutConfiguration, greekApiClient, "Applies timeout", "Configuration")
Rel(timeoutConfiguration, romanApiClient, "Applies timeout", "Configuration")
Rel(timeoutConfiguration, nordicApiClient, "Applies timeout", "Configuration")
Rel(timeoutConfiguration, indianApiClient, "Applies timeout", "Configuration")
Rel(timeoutConfiguration, celtibrianApiClient, "Applies timeout", "Configuration")

SHOW_LEGEND()
@enduml 